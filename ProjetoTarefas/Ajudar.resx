<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AElFTkSuQmCC
</value>
  </data>
</root>